# Generated by Django 5.1.4 on 2024-12-13 09:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Test', '0003_alter_branchofficelocation_options_and_more'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='IndividualEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=50, verbose_name='ФИО')),
                ('INIPA', models.CharField(default='', max_length=11, null=True, verbose_name='Снилс')),
                ('ITN', models.CharField(default='', max_length=10, null=True, verbose_name='ИНН')),
                ('gender', models.IntegerField(choices=[(0, 'Мужчина'), (1, 'Женщина'), (2, 'Не указан')], default=2, verbose_name='Пол')),
            ],
            options={
                'verbose_name': 'Физическое лицо',
                'verbose_name_plural': 'Физические лица',
                'db_table': 'IndividualEntity',
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.CharField(default='', max_length=40, null=True, verbose_name='Электронная почта')),
                ('phone', models.CharField(default='', max_length=12, null=True, verbose_name='Телефон')),
                ('note', models.TextField(blank=True, default=None, null=True, verbose_name='Примечания')),
                ('groups', models.ManyToManyField(blank=True, related_name='account_groups', to='auth.group', verbose_name='Группы')),
                ('position', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.RESTRICT, to='Test.position', verbose_name='Должность')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='account_permissions', to='auth.permission', verbose_name='Пользовательские разрешения')),
                ('individual', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='accounts', to='Test.individualentity', verbose_name='Связанное физическое лицо')),
            ],
            options={
                'verbose_name': 'Учётная запись',
                'verbose_name_plural': 'Учётные записи',
                'db_table': 'Account',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
